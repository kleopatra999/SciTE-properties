--- /dev/null	2015-03-31 08:52:05.434487729 +0800
+++ scala.properties	2013-04-18 04:09:29.815370356 +0800
@@ -0,0 +1,97 @@
+# Define SciTE settings for Scala files.
+#
+# Author  : Stephane Micheloud <stephane.micheloud@epfl.ch>
+# With some changes by Philippe Lhoste <PhiLho(a)GMX.net>
+
+file.patterns.scala=*.scala;*.kojo;*.sbt
+
+filter.scala=Scala (scala)|$(file.patterns.scala)|
+
+file.patterns.braces=$(file.patterns.scala)
+
+# We reuse the cpp lexer here
+lexer.$(file.patterns.scala)=cpp
+
+tab.size.$(file.patterns.scala)=4
+indent.size.$(file.patterns.scala)=2
+use.tabs.$(file.patterns.scala)=0
+
+keywordclass.scala=\
+abstract case catch class def do else extends \
+final finally for forSome if implicit import lazy match new \
+object override package private protected return sealed \
+throw trait try type val var while with yield _ @ \
+# Not supported with cpp lexer...
+# : = => <- <: <% >: #
+keywords.$(file.patterns.scala)=$(keywordclass.scala)
+
+keywords2.$(file.patterns.scala)=false null super this true
+
+# CPP lexer currently only use keywords2 and keyword4: keyword3 is for doc comment keywords and highlighted in this context only
+#~ keywords3.$(file.patterns.scala)=\
+#~ AllRef Any AnyRef Array Attribute Elem Iterable List \
+#~ Option Some Stack String Unit
+
+#~ keywords4.$(file.patterns.scala)=Console Nil None Predef
+
+keywords4.$(file.patterns.scala)=\
+Boolean Byte Short Char Int Long Float Double String \
+AllRef Any AnyRef Array Attribute Elem Iterable List \
+Option Some Stack Unit \
+Console Nil None Predef
+
+word.characters.$(file.patterns.scala)=$(chars.alpha)$(chars.numeric)_
+
+comment.block.scala=//~
+#comment.block.at.line.start.scala=1
+comment.stream.start.scala=/*
+comment.stream.end.scala=*/
+comment.box.start.scala=/*
+comment.box.middle.scala= *
+comment.box.end.scala= */
+#fold.comment=1
+#fold.preprocessor=1
+#fold.at.else=1
+
+statement.indent.$(file.patterns.scala)=5 case catch class do else finally \
+for if private protected try while
+statement.end.$(file.patterns.scala)=10 ;
+statement.lookback.$(file.patterns.scala)=20
+block.start.$(file.patterns.scala)=10 {
+block.end.$(file.patterns.scala)=10 }
+
+# Scala styles
+
+# The following just doesn't work as there is no (yet!) Scala lexer...
+# Default
+#style.scala.32=$(font.base)
+# White space
+style.scala.0=fore:#7F7F7F
+# Comment
+style.scala.1=$(colour.code.comment.box),$(font.code.comment.box)
+# Line Comment
+style.scala.2=$(colour.code.comment.line),$(font.code.comment.line)
+# Doc comment
+style.scala.3=$(colour.code.comment.doc),$(font.code.comment.doc)
+# Number
+style.scala.4=$(colour.number)
+# Keyword
+style.scala.5=$(colour.keyword),bold
+# Double quoted string
+style.scala.6=$(colour.string)
+# Single quoted string
+style.scala.7=$(colour.char)
+
+# Assumes here we want to put the compiled code in a 'bin' dir
+# which must exist already where the source code is.
+scala.compilation.options=-d bin -deprecation -Xmigration
+scala.run.options=-cp bin
+if PLAT_WIN
+	command.compile.*.scala=fsc.bat $(scala.compilation.options) $(FileNameExt)
+	command.build.*.scala=fsc.bat $(scala.compilation.options) *.scala
+	command.go.*.scala=scala.bat $(scala.run.options) $(FileName).Main
+if PLAT_GTK
+	command.compile.*.scala=scalac $(scala.compilation.options) $(FileNameExt)
+	command.build.*.scala=scalac $(scala.compilation.options) $(FileNameExt)
+	command.go.*.scala=scala $(scala.run.options) $(FileName)
+
